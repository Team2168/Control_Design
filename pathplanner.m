clear pos vel accel jerk dt heading x y
close all
clear all
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Admin\Downloads\2015 Control Model\2015 Control
%    Model\2168CenterLanePathFar.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/02/22 08:13:21

%% Initialize variables.
%filename = '2168CenterLanePathFar.txt';
filename = '2168StraightPath.txt';
delimiter = ' ';
startRow = 4;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
pos = dataArray{:, 1};
vel = dataArray{:, 2};
accel = dataArray{:, 3};
jerk = dataArray{:, 4};
heading = dataArray{:, 5};
dt = dataArray{:, 6};
x = dataArray{:, 7};
y = dataArray{:, 8};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;


%% field plot
%alliance wall runs through origin and goes positive
%entire field is in 1st quadrand

%plot the path
figure(1)
plot(x(1:end/2), y(1:end/2), x(end/2+1:end), y(end/2+1:end), 'r')
legend('left', 'right')
title('Left and Right Wheel Position Trajectories (Quintic Splines) - Top Down View')
ylabel('FRC Field Width (ft)')
xlabel('FRC Field Height (ft)')
fieldWidth = 24;
marker = 13+7/12;
autoBoxWidth = 1+9/12;
autoBoxHeight = 4;
autoBoxSpacng = 2+9/12;
line([0 0], [0 fieldWidth])
hold on
line([0 marker],[fieldWidth/2 fieldWidth/2],'LineStyle','--')
plot(13+7/12,fieldWidth/2,'rx')
rectangle('Position',[marker-(8+11/12)-autoBoxWidth/2 ,fieldWidth/2 - autoBoxHeight/2,autoBoxWidth,autoBoxHeight])

%lowest autobox
rectangle('Position',[(marker-(8+11/12)-autoBoxWidth/2) ,fieldWidth/2 - autoBoxSpacng - 3*autoBoxHeight/2,autoBoxWidth,autoBoxHeight])

%lowest autobox
rectangle('Position',[(marker-(8+11/12)-autoBoxWidth/2) ,fieldWidth/2 + autoBoxSpacng + 1*autoBoxHeight/2,autoBoxWidth,autoBoxHeight])

centerBox1X =(marker-(8+11/12))
centerBox1Y = fieldWidth/2 - autoBoxSpacng - 2*autoBoxHeight/2

centerBox2X =(marker-(8+11/12)) 
centerBox2Y = fieldWidth/2

centerBox3X =(marker-(8+11/12)) 
centerBox3Y = fieldWidth/2 + autoBoxSpacng + 2*autoBoxHeight/2

plot(centerBox1X,centerBox1Y,'bx')
plot(centerBox2X,centerBox2Y,'bx')
plot(centerBox3X,centerBox3Y,'bx')

axis equal 
grid on

%%  
% figure(2)
% fieldHeight = 27;
% marker = 13+7/12;
% autoBoxWidth = 1+9/12;
% autoBoxHeight = 4;
% autoBoxSpacng = 2+9/12;
% line([0 fieldHeight], [0 0])
% hold on
% line([fieldHeight/2 fieldHeight/2],[0 marker],'LineStyle','--')
% plot(fieldHeight/2,marker,'rx')
% rectangle('Position',[fieldHeight/2 - autoBoxHeight/2,marker-(8+11/12)-autoBoxWidth/2,autoBoxHeight,autoBoxWidth])
% axis equal 
% grid on
% 
% %lowest autobox
% rectangle('Position',[fieldHeight/2 - autoBoxSpacng - 3*autoBoxHeight/2,(marker-(8+11/12)-autoBoxWidth/2),autoBoxHeight,autoBoxWidth])
% 
% %lowest autobox
% rectangle('Position',[fieldHeight/2 + autoBoxSpacng + 1*autoBoxHeight/2,(marker-(8+11/12)-autoBoxWidth/2),autoBoxHeight,autoBoxWidth])
% 
% centerBox1Y =(marker-(8+11/12))
% centerBox1X = fieldHeight/2 - autoBoxSpacng - 2*autoBoxHeight/2
% 
% centerBox2Y =(marker-(8+11/12)) 
% centerBox2X = fieldHeight/2
% 
% centerBox3Y =(marker-(8+11/12)) 
% centerBox3X = fieldHeight/2 + autoBoxSpacng + 2*autoBoxHeight/2
% 
% plot(centerBox1X,centerBox1Y,'bx')
% plot(centerBox2X,centerBox2Y,'bx')
% plot(centerBox3X,centerBox3Y,'bx')
% 
% axis equal 
% grid on

%time vector
time = linspace(0,length(vel(1:end/2))* dt(1),length(vel(1:end/2)))';


%plot velocities
figure(2)
plot(time,vel(1:end/2),'bx')
hold on
plot(time,vel(end/2+1:end),'rx')
hold off
legend('left','right')


%plot accel
figure(3)
plot(time,accel(1:end/2))
hold on
plot(time,accel(end/2+1:end),'r')
hold off
legend('left','right')


%DrivetrainModelParameters
%Kevin Harrilal
%Left Drivetrain Lumped Motor Model
J=0.097546;
K=0.02122;
L=0.080297;
R=0.18761;
b=0.12362;
radius = 2; %inches

P = 1.5;
D = 0;
Kv = 1.0/15.0;
Ka = 1.0/34.0;
Ts = 0.02;


P = 0.015785378759266;
I = 0.000644452992878378;
D = 0.00656130726243663;
N = 72.8022335173517;
FF_vel = 1/120;
FF_accel = 1/180;


%time vector
time = linspace(0,length(vel(1:end/2))* dt(1),length(vel(1:end/2)))';

leftPos = pos(1:end/2);
leftVel = vel(1:end/2);
leftAccel = accel(1:end/2);


